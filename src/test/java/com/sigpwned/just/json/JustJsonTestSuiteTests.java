/*-
 * =================================LICENSE_START==================================
 * just-json
 * ====================================SECTION=====================================
 * Copyright (C) 2024 Andy Boothe
 * ====================================SECTION=====================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ==================================LICENSE_END===================================
 */
package com.sigpwned.just.json;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import org.junit.Ignore;
import org.junit.Test;

/**
 * <p>
 * This class contains tests for the {@link JustJson} class.
 * </p>
 * 
 * <p>
 * Tests are generated by the generate-junit-tests.py script using output from the
 * JsonTestSuiteRunner test application. Tests should not be modified in this file. Instead, the
 * script should be re-run to regenerate the tests.
 * </p>
 */
public class JustJsonTestSuiteTests {
  // SUPPORTED TESTS ///////////////////////////////////////////////////////////////////////////////
  /**
   * y_array_empty-string.json
   */
  @Test
  public void yesArrayEmptyString() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_array_empty-string.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_null_escape.json
   */
  @Test
  public void yesStringNullEscape() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_null_escape.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_array_null.json
   */
  @Test
  public void yesArrayNull() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/y_array_null.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_1_2_3_bytes_UTF-8_sequences.json
   */
  @Test
  public void yesString123BytesUtf8Sequences() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_1_2_3_bytes_UTF-8_sequences.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_real_exponent.json
   */
  @Test
  public void yesNumberRealExponent() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_real_exponent.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object.json
   */
  @Test
  public void yesObject() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(
          Files.readAllBytes(new File("src/test/resources/test_parsing/y_object.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_minus_zero.json
   */
  @Test
  public void yesNumberMinusZero() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_minus_zero.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_double_close_to_zero.json
   */
  @Test
  public void yesNumberDoubleCloseToZero() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_double_close_to_zero.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_allowed_escapes.json
   */
  @Test
  public void yesStringAllowedEscapes() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_allowed_escapes.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_array_empty.json
   */
  @Test
  public void yesArrayEmpty() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/y_array_empty.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_structure_string_empty.json
   */
  @Test
  public void yesStructureStringEmpty() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_structure_string_empty.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object_empty.json
   */
  @Test
  public void yesObjectEmpty() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/y_object_empty.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_pi.json
   */
  @Test
  public void yesStringPi() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/y_string_pi.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_escaped_noncharacter.json
   */
  @Test
  public void yesStringEscapedNoncharacter() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_escaped_noncharacter.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_int_with_exp.json
   */
  @Test
  public void yesNumberIntWithExp() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_int_with_exp.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object_duplicated_key_and_value.json
   */
  @Test
  public void yesObjectDuplicatedKeyAndValue() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_object_duplicated_key_and_value.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_last_surrogates_1_and_2.json
   */
  @Test
  public void yesStringLastSurrogates1And2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_last_surrogates_1_and_2.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_accepted_surrogate_pair.json
   */
  @Test
  public void yesStringAcceptedSurrogatePair() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_accepted_surrogate_pair.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_structure_lonely_false.json
   */
  @Test
  public void yesStructureLonelyFalse() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_structure_lonely_false.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_real_capital_e_pos_exp.json
   */
  @Test
  public void yesNumberRealCapitalEPosExp() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_real_capital_e_pos_exp.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_unicode.json
   */
  @Test
  public void yesStringUnicode() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_unicode.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_structure_true_in_array.json
   */
  @Test
  public void yesStructureTrueInArray() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_structure_true_in_array.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_unicode_U+1FFFE_nonchar.json
   */
  @Test
  public void yesStringUnicodeU1fffeNonchar() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_unicode_U+1FFFE_nonchar.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_backslash_and_u_escaped_zero.json
   */
  @Test
  public void yesStringBackslashAndUEscapedZero() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_backslash_and_u_escaped_zero.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_three-byte-utf-8.json
   */
  @Test
  public void yesStringThreeByteUtf8() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_three-byte-utf-8.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_backslash_doublequotes.json
   */
  @Test
  public void yesStringBackslashDoublequotes() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_backslash_doublequotes.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_uescaped_newline.json
   */
  @Test
  public void yesStringUescapedNewline() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_uescaped_newline.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_after_space.json
   */
  @Test
  public void yesNumberAfterSpace() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_after_space.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_negative_one.json
   */
  @Test
  public void yesNumberNegativeOne() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_negative_one.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_structure_lonely_int.json
   */
  @Test
  public void yesStructureLonelyInt() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_structure_lonely_int.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_structure_lonely_negative_real.json
   */
  @Test
  public void yesStructureLonelyNegativeReal() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_structure_lonely_negative_real.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_unicode_escaped_double_quote.json
   */
  @Test
  public void yesStringUnicodeEscapedDoubleQuote() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_unicode_escaped_double_quote.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_real_capital_e.json
   */
  @Test
  public void yesNumberRealCapitalE() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_real_capital_e.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_double_escape_a.json
   */
  @Test
  public void yesStringDoubleEscapeA() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_double_escape_a.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_real_fraction_exponent.json
   */
  @Test
  public void yesNumberRealFractionExponent() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_real_fraction_exponent.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_comments.json
   */
  @Test
  public void yesStringComments() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_comments.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_structure_lonely_null.json
   */
  @Test
  public void yesStructureLonelyNull() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_structure_lonely_null.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_space.json
   */
  @Test
  public void yesStringSpace() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/y_string_space.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_uEscape.json
   */
  @Test
  public void yesStringUescape() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_uEscape.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_array_with_1_and_newline.json
   */
  @Test
  public void yesArrayWith1AndNewline() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_array_with_1_and_newline.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_0e+1.json
   */
  @Test
  public void yesNumber0e1() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/y_number_0e+1.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object_with_newlines.json
   */
  @Test
  public void yesObjectWithNewlines() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_object_with_newlines.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_real_capital_e_neg_exp.json
   */
  @Test
  public void yesNumberRealCapitalENegExp() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_real_capital_e_neg_exp.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_structure_lonely_string.json
   */
  @Test
  public void yesStructureLonelyString() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_structure_lonely_string.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_negative_int.json
   */
  @Test
  public void yesNumberNegativeInt() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_negative_int.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_array_ending_with_newline.json
   */
  @Test
  public void yesArrayEndingWithNewline() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_array_ending_with_newline.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_simple_real.json
   */
  @Test
  public void yesNumberSimpleReal() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_simple_real.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_unicode_U+200B_ZERO_WIDTH_SPACE.json
   */
  @Test
  public void yesStringUnicodeU200bZeroWidthSpace() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_unicode_U+200B_ZERO_WIDTH_SPACE.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_u+2028_line_sep.json
   */
  @Test
  public void yesStringU2028LineSep() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_u+2028_line_sep.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_structure_lonely_true.json
   */
  @Test
  public void yesStructureLonelyTrue() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_structure_lonely_true.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_two-byte-utf-8.json
   */
  @Test
  public void yesStringTwoByteUtf8() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_two-byte-utf-8.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_unicodeEscapedBackslash.json
   */
  @Test
  public void yesStringUnicodeescapedbackslash() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_unicodeEscapedBackslash.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object_simple.json
   */
  @Test
  public void yesObjectSimple() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_object_simple.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_unicode_U+2064_invisible_plus.json
   */
  @Test
  public void yesStringUnicodeU2064InvisiblePlus() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_unicode_U+2064_invisible_plus.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_escaped_control_character.json
   */
  @Test
  public void yesStringEscapedControlCharacter() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_escaped_control_character.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_simple_ascii.json
   */
  @Test
  public void yesStringSimpleAscii() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_simple_ascii.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_unicode_U+10FFFE_nonchar.json
   */
  @Test
  public void yesStringUnicodeU10fffeNonchar() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_unicode_U+10FFFE_nonchar.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_utf8.json
   */
  @Test
  public void yesStringUtf8() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/y_string_utf8.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_unescaped_char_delete.json
   */
  @Test
  public void yesStringUnescapedCharDelete() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_unescaped_char_delete.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object_extreme_numbers.json
   */
  @Test
  public void yesObjectExtremeNumbers() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_object_extreme_numbers.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object_long_strings.json
   */
  @Test
  public void yesObjectLongStrings() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_object_long_strings.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_negative_zero.json
   */
  @Test
  public void yesNumberNegativeZero() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_negative_zero.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_array_with_leading_space.json
   */
  @Test
  public void yesArrayWithLeadingSpace() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_array_with_leading_space.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_structure_trailing_newline.json
   */
  @Test
  public void yesStructureTrailingNewline() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_structure_trailing_newline.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_surrogates_U+1D11E_MUSICAL_SYMBOL_G_CLEF.json
   */
  @Test
  public void yesStringSurrogatesU1d11eMusicalSymbolGClef() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(new File(
          "src/test/resources/test_parsing/y_string_surrogates_U+1D11E_MUSICAL_SYMBOL_G_CLEF.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object_string_unicode.json
   */
  @Test
  public void yesObjectStringUnicode() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_object_string_unicode.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_0e1.json
   */
  @Test
  public void yesNumber0e1_2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/y_number_0e1.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_real_pos_exponent.json
   */
  @Test
  public void yesNumberRealPosExponent() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_real_pos_exponent.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_double_escape_n.json
   */
  @Test
  public void yesStringDoubleEscapeN() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_double_escape_n.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_array_arraysWithSpaces.json
   */
  @Test
  public void yesArrayArrayswithspaces() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_array_arraysWithSpaces.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_array_heterogeneous.json
   */
  @Test
  public void yesArrayHeterogeneous() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_array_heterogeneous.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_with_del_character.json
   */
  @Test
  public void yesStringWithDelCharacter() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_with_del_character.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_array_with_several_null.json
   */
  @Test
  public void yesArrayWithSeveralNull() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_array_with_several_null.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_simple_int.json
   */
  @Test
  public void yesNumberSimpleInt() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_simple_int.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object_empty_key.json
   */
  @Test
  public void yesObjectEmptyKey() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_object_empty_key.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_nonCharacterInUTF-8_U+FFFF.json
   */
  @Test
  public void yesStringNoncharacterinutf8UFfff() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_nonCharacterInUTF-8_U+FFFF.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object_escaped_null_in_key.json
   */
  @Test
  public void yesObjectEscapedNullInKey() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_object_escaped_null_in_key.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_accepted_surrogate_pairs.json
   */
  @Test
  public void yesStringAcceptedSurrogatePairs() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_accepted_surrogate_pairs.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number_real_neg_exp.json
   */
  @Test
  public void yesNumberRealNegExp() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_number_real_neg_exp.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_structure_whitespace_array.json
   */
  @Test
  public void yesStructureWhitespaceArray() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_structure_whitespace_array.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_in_array_with_leading_space.json
   */
  @Test
  public void yesStringInArrayWithLeadingSpace() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_in_array_with_leading_space.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_nonCharacterInUTF-8_U+10FFFF.json
   */
  @Test
  public void yesStringNoncharacterinutf8U10ffff() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_nonCharacterInUTF-8_U+10FFFF.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_array_with_trailing_space.json
   */
  @Test
  public void yesArrayWithTrailingSpace() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_array_with_trailing_space.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object_duplicated_key.json
   */
  @Test
  public void yesObjectDuplicatedKey() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_object_duplicated_key.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_one-byte-utf-8.json
   */
  @Test
  public void yesStringOneByteUtf8() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_one-byte-utf-8.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_unicode_2.json
   */
  @Test
  public void yesStringUnicode2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_unicode_2.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_unicode_U+FDD0_nonchar.json
   */
  @Test
  public void yesStringUnicodeUFdd0Nonchar() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_unicode_U+FDD0_nonchar.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_nbsp_uescaped.json
   */
  @Test
  public void yesStringNbspUescaped() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_nbsp_uescaped.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_array_false.json
   */
  @Test
  public void yesArrayFalse() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/y_array_false.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_unicode_U+FFFE_nonchar.json
   */
  @Test
  public void yesStringUnicodeUFffeNonchar() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_unicode_U+FFFE_nonchar.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_reservedCharacterInUTF-8_U+1BFFF.json
   */
  @Test
  public void yesStringReservedcharacterinutf8U1bfff() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_reservedCharacterInUTF-8_U+1BFFF.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_u+2029_par_sep.json
   */
  @Test
  public void yesStringU2029ParSep() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_u+2029_par_sep.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_object_basic.json
   */
  @Test
  public void yesObjectBasic() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/y_object_basic.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_string_in_array.json
   */
  @Test
  public void yesStringInArray() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/y_string_in_array.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * y_number.json
   */
  @Test
  public void yesNumber() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "y" test, so the file contains valid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(
          Files.readAllBytes(new File("src/test/resources/test_parsing/y_number.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNull(problem);
  }

  /**
   * n_number_minus_sign_with_trailing_garbage.json
   */
  @Test
  public void noNumberMinusSignWithTrailingGarbage() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_minus_sign_with_trailing_garbage.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_with_single_string.json
   */
  @Test
  public void noObjectWithSingleString() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_with_single_string.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_unescaped_ctrl_char.json
   */
  @Test
  public void noStringUnescapedCtrlChar() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_unescaped_ctrl_char.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_missing_value.json
   */
  @Test
  public void noObjectMissingValue() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_missing_value.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_object_close_array.json
   */
  @Test
  public void noStructureOpenObjectCloseArray() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_object_close_array.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_unclosed_array.json
   */
  @Test
  public void noStructureUnclosedArray() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_unclosed_array.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_escape_x.json
   */
  @Test
  public void noStringEscapeX() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_escape_x.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_invalid-utf-8-in-bigger-int.json
   */
  @Test
  public void noNumberInvalidUtf8InBiggerInt() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_invalid-utf-8-in-bigger-int.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_invalid-utf-8-in-exponent.json
   */
  @Test
  public void noNumberInvalidUtf8InExponent() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_invalid-utf-8-in-exponent.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_single_space.json
   */
  @Test
  public void noSingleSpace() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_single_space.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_unquoted_key.json
   */
  @Test
  public void noObjectUnquotedKey() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_unquoted_key.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_a_invalid_utf8.json
   */
  @Test
  public void noArrayAInvalidUtf8() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_a_invalid_utf8.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_several_trailing_commas.json
   */
  @Test
  public void noObjectSeveralTrailingCommas() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_several_trailing_commas.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_single_eacute.json
   */
  @Test
  public void noStructureSingleEacute() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_single_eacute.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_object_comma.json
   */
  @Test
  public void noStructureOpenObjectComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_object_comma.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_just_minus.json
   */
  @Test
  public void noArrayJustMinus() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_just_minus.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_object_open_array.json
   */
  @Test
  public void noStructureOpenObjectOpenArray() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_object_open_array.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_invalid_unicode_escape.json
   */
  @Test
  public void noStringInvalidUnicodeEscape() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_invalid_unicode_escape.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_9.e+.json
   */
  @Test
  public void noNumber9E() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_9.e+.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_incomplete_escape.json
   */
  @Test
  public void noStringIncompleteEscape() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_incomplete_escape.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_unclosed_array_unfinished_false.json
   */
  @Test
  public void noStructureUnclosedArrayUnfinishedFalse() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(new File(
          "src/test/resources/test_parsing/n_structure_unclosed_array_unfinished_false.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_1.0e+.json
   */
  @Test
  public void noNumber10e() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_1.0e+.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_-NaN.json
   */
  @Test
  public void noNumberNan() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_-NaN.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_unescaped_tab.json
   */
  @Test
  public void noStringUnescapedTab() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_unescaped_tab.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_ascii-unicode-identifier.json
   */
  @Test
  public void noStructureAsciiUnicodeIdentifier() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_ascii-unicode-identifier.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_incomplete_surrogate.json
   */
  @Test
  public void noStringIncompleteSurrogate() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_incomplete_surrogate.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_items_separated_by_semicolon.json
   */
  @Test
  public void noArrayItemsSeparatedBySemicolon() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_items_separated_by_semicolon.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_infinity.json
   */
  @Test
  public void noNumberInfinity() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_infinity.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_comma_instead_of_closing_brace.json
   */
  @Test
  public void noStructureCommaInsteadOfClosingBrace() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(new File(
          "src/test/resources/test_parsing/n_structure_comma_instead_of_closing_brace.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_with_trailing_garbage.json
   */
  @Test
  public void noStringWithTrailingGarbage() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_with_trailing_garbage.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_0.1.2.json
   */
  @Test
  public void noNumber012() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_0.1.2.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_uescaped_LF_before_string.json
   */
  @Test
  public void noStructureUescapedLfBeforeString() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_uescaped_LF_before_string.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_Inf.json
   */
  @Test
  public void noNumberInf() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_Inf.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_incomplete.json
   */
  @Test
  public void noArrayIncomplete() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_incomplete.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_accentuated_char_no_quotes.json
   */
  @Test
  public void noStringAccentuatedCharNoQuotes() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_accentuated_char_no_quotes.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_.2e-3.json
   */
  @Test
  public void noNumber2e3() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_.2e-3.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_array_comma.json
   */
  @Test
  public void noStructureOpenArrayComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_array_comma.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_missing_value.json
   */
  @Test
  public void noArrayMissingValue() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_missing_value.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_trailing_comma.json
   */
  @Test
  public void noObjectTrailingComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_trailing_comma.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_two_commas_in_a_row.json
   */
  @Test
  public void noObjectTwoCommasInARow() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_two_commas_in_a_row.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_no_data.json
   */
  @Test
  public void noStructureNoData() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_no_data.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_single_star.json
   */
  @Test
  public void noStructureSingleStar() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_single_star.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_invalid-negative-real.json
   */
  @Test
  public void noNumberInvalidNegativeReal() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_invalid-negative-real.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_lone-invalid-utf-8.json
   */
  @Test
  public void noStructureLoneInvalidUtf8() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_lone-invalid-utf-8.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_incomplete_invalid_value.json
   */
  @Test
  public void noArrayIncompleteInvalidValue() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_incomplete_invalid_value.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_0e.json
   */
  @Test
  public void noNumber0e() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_0e.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_invalid-utf-8-in-int.json
   */
  @Test
  public void noNumberInvalidUtf8InInt() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_invalid-utf-8-in-int.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_invalid_utf8_after_escape.json
   */
  @Test
  public void noStringInvalidUtf8AfterEscape() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_invalid_utf8_after_escape.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_number_and_comma.json
   */
  @Test
  public void noArrayNumberAndComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_number_and_comma.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_unclosed_object.json
   */
  @Test
  public void noStructureUnclosedObject() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_unclosed_object.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_starting_with_dot.json
   */
  @Test
  public void noNumberStartingWithDot() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_starting_with_dot.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_whitespace_formfeed.json
   */
  @Test
  public void noStructureWhitespaceFormfeed() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_whitespace_formfeed.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_key_with_single_quotes.json
   */
  @Test
  public void noObjectKeyWithSingleQuotes() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_key_with_single_quotes.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_unclosed_array_partial_null.json
   */
  @Test
  public void noStructureUnclosedArrayPartialNull() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_unclosed_array_partial_null.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_object_with_trailing_garbage.json
   */
  @Test
  public void noStructureObjectWithTrailingGarbage() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_object_with_trailing_garbage.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_non_string_key.json
   */
  @Test
  public void noObjectNonStringKey() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_non_string_key.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_1.0e-.json
   */
  @Test
  public void noNumber10e_2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_1.0e-.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_++.json
   */
  @Test
  public void noNumber_2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_++.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_garbage_at_end.json
   */
  @Test
  public void noObjectGarbageAtEnd() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_garbage_at_end.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_number_and_several_commas.json
   */
  @Test
  public void noArrayNumberAndSeveralCommas() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_number_and_several_commas.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_UTF8_BOM_no_data.json
   */
  @Test
  public void noStructureUtf8BomNoData() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_UTF8_BOM_no_data.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_single_doublequote.json
   */
  @Test
  public void noStringSingleDoublequote() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_single_doublequote.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_lone_continuation_byte_in_key_and_trailing_comma.json
   */
  @Test
  public void noObjectLoneContinuationByteInKeyAndTrailingComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(new File(
          "src/test/resources/test_parsing/n_object_lone_continuation_byte_in_key_and_trailing_comma.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_end_array.json
   */
  @Test
  public void noStructureEndArray() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_end_array.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_unicode_CapitalU.json
   */
  @Test
  public void noStringUnicodeCapitalu() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_unicode_CapitalU.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_extra_comma.json
   */
  @Test
  public void noArrayExtraComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_extra_comma.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_with_alpha_char.json
   */
  @Test
  public void noNumberWithAlphaChar() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_with_alpha_char.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_backslash_00.json
   */
  @Test
  public void noStringBackslash00() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_backslash_00.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_whitespace_U+2060_word_joiner.json
   */
  @Test
  public void noStructureWhitespaceU2060WordJoiner() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_whitespace_U+2060_word_joiner.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_capitalized_True.json
   */
  @Test
  public void noStructureCapitalizedTrue() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_capitalized_True.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_star_inside.json
   */
  @Test
  public void noArrayStarInside() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_star_inside.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_trailing_comment_slash_open.json
   */
  @Test
  public void noObjectTrailingCommentSlashOpen() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_trailing_comment_slash_open.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_1_true_without_comma.json
   */
  @Test
  public void noArray1TrueWithoutComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_1_true_without_comma.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_with_alpha.json
   */
  @Test
  public void noNumberWithAlpha() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_with_alpha.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_array_apostrophe.json
   */
  @Test
  public void noStructureOpenArrayApostrophe() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_array_apostrophe.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_object_unclosed_no_value.json
   */
  @Test
  public void noStructureObjectUnclosedNoValue() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_object_unclosed_no_value.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_0_capital_E.json
   */
  @Test
  public void noNumber0CapitalE() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_0_capital_E.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_incomplete_true.json
   */
  @Test
  public void noIncompleteTrue() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_incomplete_true.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_double_extra_comma.json
   */
  @Test
  public void noArrayDoubleExtraComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_double_extra_comma.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_+Inf.json
   */
  @Test
  public void noNumberInf_2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_+Inf.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_hex_2_digits.json
   */
  @Test
  public void noNumberHex2Digits() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_hex_2_digits.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_close_unopened_array.json
   */
  @Test
  public void noStructureCloseUnopenedArray() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_close_unopened_array.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_comma_instead_of_colon.json
   */
  @Test
  public void noObjectCommaInsteadOfColon() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_comma_instead_of_colon.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_object_string_with_apostrophes.json
   */
  @Test
  public void noStructureOpenObjectStringWithApostrophes() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(new File(
          "src/test/resources/test_parsing/n_structure_open_object_string_with_apostrophes.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_object_with_comment.json
   */
  @Test
  public void noStructureObjectWithComment() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_object_with_comment.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_incomplete_surrogate_escape_invalid.json
   */
  @Test
  public void noStringIncompleteSurrogateEscapeInvalid() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(new File(
          "src/test/resources/test_parsing/n_string_incomplete_surrogate_escape_invalid.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_trailing_comment_open.json
   */
  @Test
  public void noObjectTrailingCommentOpen() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_trailing_comment_open.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_colon_instead_of_comma.json
   */
  @Test
  public void noArrayColonInsteadOfComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_colon_instead_of_comma.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_trailing_comment_slash_open_incomplete.json
   */
  @Test
  public void noObjectTrailingCommentSlashOpenIncomplete() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(new File(
          "src/test/resources/test_parsing/n_object_trailing_comment_slash_open_incomplete.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_unclosed_with_object_inside.json
   */
  @Test
  public void noArrayUnclosedWithObjectInside() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_unclosed_with_object_inside.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_array_trailing_garbage.json
   */
  @Test
  public void noStructureArrayTrailingGarbage() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_array_trailing_garbage.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_double_array.json
   */
  @Test
  public void noStructureDoubleArray() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_double_array.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_newlines_unclosed.json
   */
  @Test
  public void noArrayNewlinesUnclosed() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_newlines_unclosed.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_missing_colon.json
   */
  @Test
  public void noObjectMissingColon() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_missing_colon.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_missing_semicolon.json
   */
  @Test
  public void noObjectMissingSemicolon() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_missing_semicolon.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_minus_space_1.json
   */
  @Test
  public void noNumberMinusSpace1() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_minus_space_1.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_object.json
   */
  @Test
  public void noStructureOpenObject() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_object.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_escaped_ctrl_char_tab.json
   */
  @Test
  public void noStringEscapedCtrlCharTab() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_escaped_ctrl_char_tab.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_invalid+-.json
   */
  @Test
  public void noNumberInvalid() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_invalid+-.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_100000_opening_arrays.json
   */
  @Test
  public void noStructure100000OpeningArrays() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_100000_opening_arrays.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_leading_uescaped_thinspace.json
   */
  @Test
  public void noStringLeadingUescapedThinspace() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_leading_uescaped_thinspace.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_0.3e.json
   */
  @Test
  public void noNumber03e() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_0.3e.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_lone-open-bracket.json
   */
  @Test
  public void noStructureLoneOpenBracket() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_lone-open-bracket.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_object_followed_by_closing_object.json
   */
  @Test
  public void noStructureObjectFollowedByClosingObject() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(new File(
          "src/test/resources/test_parsing/n_structure_object_followed_by_closing_object.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_0e+.json
   */
  @Test
  public void noNumber0e_2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_0e+.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_unicode-identifier.json
   */
  @Test
  public void noStructureUnicodeIdentifier() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_unicode-identifier.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_1eE2.json
   */
  @Test
  public void noNumber1ee2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_1eE2.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_+1.json
   */
  @Test
  public void noNumber1() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_+1.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_incomplete_null.json
   */
  @Test
  public void noIncompleteNull() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_incomplete_null.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_multidigit_number_then_00.json
   */
  @Test
  public void noMultidigitNumberThen00() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_multidigit_number_then_00.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_1_surrogate_then_escape_u.json
   */
  @Test
  public void noString1SurrogateThenEscapeU() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_1_surrogate_then_escape_u.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_double_comma.json
   */
  @Test
  public void noArrayDoubleComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_double_comma.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_invalid_utf8.json
   */
  @Test
  public void noArrayInvalidUtf8() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_invalid_utf8.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_repeated_null_null.json
   */
  @Test
  public void noObjectRepeatedNullNull() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_repeated_null_null.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_bad_value.json
   */
  @Test
  public void noObjectBadValue() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_bad_value.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_no_quotes_with_bad_escape.json
   */
  @Test
  public void noStringNoQuotesWithBadEscape() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_no_quotes_with_bad_escape.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_neg_with_garbage_at_end.json
   */
  @Test
  public void noNumberNegWithGarbageAtEnd() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_neg_with_garbage_at_end.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_1_surrogate_then_escape_u1.json
   */
  @Test
  public void noString1SurrogateThenEscapeU1() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_1_surrogate_then_escape_u1.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_spaces_vertical_tab_formfeed.json
   */
  @Test
  public void noArraySpacesVerticalTabFormfeed() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_spaces_vertical_tab_formfeed.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_array_object.json
   */
  @Test
  public void noStructureOpenArrayObject() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_array_object.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_object_open_string.json
   */
  @Test
  public void noStructureOpenObjectOpenString() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_object_open_string.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_non_string_key_but_huge_number_instead.json
   */
  @Test
  public void noObjectNonStringKeyButHugeNumberInstead() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(new File(
          "src/test/resources/test_parsing/n_object_non_string_key_but_huge_number_instead.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_single_quote.json
   */
  @Test
  public void noObjectSingleQuote() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_single_quote.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_0.3e+.json
   */
  @Test
  public void noNumber03e_2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_0.3e+.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_real_garbage_after_e.json
   */
  @Test
  public void noNumberRealGarbageAfterE() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_real_garbage_after_e.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_escaped_backslash_bad.json
   */
  @Test
  public void noStringEscapedBackslashBad() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_escaped_backslash_bad.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_with_trailing_garbage.json
   */
  @Test
  public void noObjectWithTrailingGarbage() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_with_trailing_garbage.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_expression.json
   */
  @Test
  public void noNumberExpression() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_expression.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_array_string.json
   */
  @Test
  public void noStructureOpenArrayString() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_array_string.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_missing_key.json
   */
  @Test
  public void noObjectMissingKey() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_missing_key.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_1_surrogate_then_escape_u1x.json
   */
  @Test
  public void noString1SurrogateThenEscapeU1x() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_1_surrogate_then_escape_u1x.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_trailing_#.json
   */
  @Test
  public void noStructureTrailing() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_trailing_#.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_array_with_extra_array_close.json
   */
  @Test
  public void noStructureArrayWithExtraArrayClose() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_array_with_extra_array_close.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_angle_bracket_..json
   */
  @Test
  public void noStructureAngleBracket() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_angle_bracket_..json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_bracket_key.json
   */
  @Test
  public void noObjectBracketKey() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_bracket_key.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_NaN.json
   */
  @Test
  public void noNumberNan_2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_NaN.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_single_string_no_double_quotes.json
   */
  @Test
  public void noStringSingleStringNoDoubleQuotes() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_single_string_no_double_quotes.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_unescaped_newline.json
   */
  @Test
  public void noStringUnescapedNewline() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_unescaped_newline.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_single_quote.json
   */
  @Test
  public void noStringSingleQuote() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_single_quote.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_1_000.json
   */
  @Test
  public void noNumber1000() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_1_000.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_incomplete_escaped_character.json
   */
  @Test
  public void noStringIncompleteEscapedCharacter() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_incomplete_escaped_character.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_no-colon.json
   */
  @Test
  public void noObjectNoColon() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_no-colon.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_trailing_comment.json
   */
  @Test
  public void noObjectTrailingComment() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_trailing_comment.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_incomplete_false.json
   */
  @Test
  public void noIncompleteFalse() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_incomplete_false.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_null-byte-outside-string.json
   */
  @Test
  public void noStructureNullByteOutsideString() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_null-byte-outside-string.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_.-1.json
   */
  @Test
  public void noNumber1_2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_.-1.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_number_with_trailing_garbage.json
   */
  @Test
  public void noStructureNumberWithTrailingGarbage() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_number_with_trailing_garbage.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_invalid_backslash_esc.json
   */
  @Test
  public void noStringInvalidBackslashEsc() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_invalid_backslash_esc.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_minus_infinity.json
   */
  @Test
  public void noNumberMinusInfinity() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_minus_infinity.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_unclosed.json
   */
  @Test
  public void noArrayUnclosed() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_unclosed.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_real_with_invalid_utf8_after_e.json
   */
  @Test
  public void noNumberRealWithInvalidUtf8AfterE() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_real_with_invalid_utf8_after_e.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_open.json
   */
  @Test
  public void noStructureOpenOpen() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_open.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_1.0e.json
   */
  @Test
  public void noNumber10e_3() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_1.0e.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_unclosed_trailing_comma.json
   */
  @Test
  public void noArrayUnclosedTrailingComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_unclosed_trailing_comma.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_comma_and_number.json
   */
  @Test
  public void noArrayCommaAndNumber() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_comma_and_number.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_1_surrogate_then_escape.json
   */
  @Test
  public void noString1SurrogateThenEscape() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_1_surrogate_then_escape.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_unclosed_array_unfinished_true.json
   */
  @Test
  public void noStructureUnclosedArrayUnfinishedTrue() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(new File(
          "src/test/resources/test_parsing/n_structure_unclosed_array_unfinished_true.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_escaped_emoji.json
   */
  @Test
  public void noStringEscapedEmoji() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_escaped_emoji.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_comma_after_close.json
   */
  @Test
  public void noArrayCommaAfterClose() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_comma_after_close.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_U+2060_word_joined.json
   */
  @Test
  public void noStructureU2060WordJoined() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_U+2060_word_joined.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_unclosed_with_new_lines.json
   */
  @Test
  public void noArrayUnclosedWithNewLines() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_unclosed_with_new_lines.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_angle_bracket_null.json
   */
  @Test
  public void noStructureAngleBracketNull() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_angle_bracket_null.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_emoji.json
   */
  @Test
  public void noObjectEmoji() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_object_emoji.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_unterminated-value.json
   */
  @Test
  public void noObjectUnterminatedValue() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_unterminated-value.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_array_with_unclosed_string.json
   */
  @Test
  public void noStructureArrayWithUnclosedString() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_array_with_unclosed_string.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_object_double_colon.json
   */
  @Test
  public void noObjectDoubleColon() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_object_double_colon.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_array_open_string.json
   */
  @Test
  public void noStructureOpenArrayOpenString() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_array_open_string.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_extra_close.json
   */
  @Test
  public void noArrayExtraClose() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_extra_close.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_inner_array_no_comma.json
   */
  @Test
  public void noArrayInnerArrayNoComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_inner_array_no_comma.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_start_escape_unclosed.json
   */
  @Test
  public void noStringStartEscapeUnclosed() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_start_escape_unclosed.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_string_invalid-utf-8-in-escape.json
   */
  @Test
  public void noStringInvalidUtf8InEscape() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_string_invalid-utf-8-in-escape.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_open_array_open_object.json
   */
  @Test
  public void noStructureOpenArrayOpenObject() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_open_array_open_object.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_hex_1_digit.json
   */
  @Test
  public void noNumberHex1Digit() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_hex_1_digit.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_structure_incomplete_UTF8_BOM.json
   */
  @Test
  public void noStructureIncompleteUtf8Bom() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_structure_incomplete_UTF8_BOM.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_-1.0..json
   */
  @Test
  public void noNumber10() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_-1.0..json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_0_capital_E+.json
   */
  @Test
  public void noNumber0CapitalE_2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_0_capital_E+.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_array_just_comma.json
   */
  @Test
  public void noArrayJustComma() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_array_just_comma.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  // UNSUPPORTED TESTS /////////////////////////////////////////////////////////////////////////////
  /**
   * n_number_-2..json
   */
  @Test
  @Ignore
  public void noNumber2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_-2..json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_with_leading_zero.json
   */
  @Test
  @Ignore
  public void noNumberWithLeadingZero() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_with_leading_zero.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_2.e3.json
   */
  @Test
  @Ignore
  public void noNumber2E3() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_2.e3.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_U+FF11_fullwidth_digit_one.json
   */
  @Test
  @Ignore
  public void noNumberUFf11FullwidthDigitOne() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_U+FF11_fullwidth_digit_one.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_-01.json
   */
  @Test
  @Ignore
  public void noNumber01() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_-01.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_2.e+3.json
   */
  @Test
  @Ignore
  public void noNumber2E3_2() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_2.e+3.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_neg_int_starting_with_zero.json
   */
  @Test
  @Ignore
  public void noNumberNegIntStartingWithZero() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_neg_int_starting_with_zero.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_2.e-3.json
   */
  @Test
  @Ignore
  public void noNumber2E3_3() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_2.e-3.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_neg_real_without_int_part.json
   */
  @Test
  @Ignore
  public void noNumberNegRealWithoutIntPart() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_neg_real_without_int_part.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_real_without_fractional_part.json
   */
  @Test
  @Ignore
  public void noNumberRealWithoutFractionalPart() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files.readAllBytes(
          new File("src/test/resources/test_parsing/n_number_real_without_fractional_part.json")
              .toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }

  /**
   * n_number_0.e1.json
   */
  @Test
  @Ignore
  public void noNumber0E1() throws IOException {
    // This test is currently DISABLED because the implementation is known not to pass it.
    // This is a "n" test, so the file contains invalid JSON.
    IllegalArgumentException problem;
    try {
      JustJson.parseDocument(new String(Files
          .readAllBytes(new File("src/test/resources/test_parsing/n_number_0.e1.json").toPath())));
      problem = null;
    } catch (IllegalArgumentException e) {
      problem = e;
    }

    assertNotNull(problem);
  }
}
